buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['RnAndroidAuto_kotlinVersion']

  ext {
    // App SDK versions.
    compileSdkVersion = 30
    minSdkVersion = 19
    targetSdkVersion = 30

    // Dependency versions.
    androidx_app_compat_version = '1.2.0'
    androidx_car_version = '1.0.0-alpha7'
    androidx_core_ktx_version = '1.3.1'
    androidx_media_version = '1.0.1'
    androidx_preference_version = '1.1.1'
    androidx_test_runner_version = '1.3.0'
    arch_lifecycle_version = '2.2.0'
    constraint_layout_version = '2.0.1'
    espresso_version = '3.3.0'
//    exoplayer_version = '2.16.0'
    exoplayer_version="2.18.0"
    fragment_version = '1.2.5'
    glide_version = '4.15.0'
    gms_strict_version_matcher_version = '1.0.3'
    gradle_version = '3.1.4'
    gson_version = '2.8.5'
    junit_version = '4.13'
    kotlin_version = '1.3.72'
    kotlin_coroutines_version = '1.1.0'
    multidex_version = '1.0.3'
    play_services_auth_version = '18.1.0'
    recycler_view_version = '1.1.0'
    robolectric_version = '4.2'
    test_runner_version = '1.1.0'
  }
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.4'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['AndroidAuto_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['AndroidAuto_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    multiDexEnabled true
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    pickFirst 'lib/x86/libc++_shared.so'
    pickFirst 'lib/x86_64/libc++_shared.so'
    pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    pickFirst 'lib/arm64-v8a/libc++_shared.so'
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }

  flatDir {
    dirs 'libs'
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "androidx.car.app:app-projected:1.1.0"
  implementation "androidx.car.app:app:1.1.0"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:1.7.0"


  implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
  implementation "androidx.preference:preference:$androidx_preference_version"
  implementation "androidx.car:car:$androidx_car_version"
  implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
  implementation "androidx.appcompat:appcompat:$androidx_app_compat_version"
  implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_version"

  implementation "com.google.android.gms:play-services-auth:$play_services_auth_version"
  implementation 'com.android.support:multidex:1.0.3'
//  testImplementation "junit:junit:$junit_version"
//
//  androidTestImplementation "androidx.test:runner:$androidx_test_runner_version"
//  androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"


  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

  implementation "androidx.media:media:$androidx_media_version"

  implementation "com.google.code.gson:gson:$gson_version"

  // ExoPlayer dependencies

  // This allows UAMP to utilize a local version of ExoPlayer, which is particularly
  // useful for extending the MediaSession extension, as well as for testing and
  // customization. If the ":exoplayer-library-core" project is included, we assume
  // the others are included as well.
  if (findProject(':exoplayer-library-core') != null) {
    implementation project(':exoplayer-library-core')
    implementation project(':exoplayer-library-ui')
    implementation project(':exoplayer-extension-mediasession')
    implementation project(':exoplayer-extension-cast')
  } else {
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-mediasession:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-cast:$exoplayer_version"
  }
  implementation 'com.google.android.gms:play-services-cast:9.4.0'
  implementation 'com.android.support:appcompat-v7:23.0.1'

//  // Glide dependencies
//  implementation "com.github.bumptech.glide:glide:$glide_version"
//  annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
  implementation 'com.github.bumptech.glide:glide:4.16.0'

// From node_modules
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "AndroidAuto"
    codegenJavaPackageName = "com.reactnativeandroidauto"
  }
}
